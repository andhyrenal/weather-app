{"version":3,"sources":["Weather.js","WeatherDetail.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","weatherData","lat","long","useState","forecast","setForcast","useEffect","a","axios","get","res","data","fetchData","filtered","daily","filter","day","index","className","main","temp","name","moment","format","map","dt","src","weather","icon","alt","description","WeatherDetail","weatherDetail","wind","sys","App","setLat","setLong","setData","location","setLocation","input","setInput","api_key","base_url","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","coord","action","onSubmit","e","preventDefault","Input","value","onChange","target","placeholder","transparent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.422d73aa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\n\r\nconst Weather = ({ weatherData, lat, long }) => {\r\n  const api_key = \"731368453825eee9b4a6f83b6fb487e0\";\r\n  const base_url = \"https://api.openweathermap.org/data/2.5\";\r\n  const icon = \"http://openweathermap.org/img/wn/\";\r\n  const [forecast, setForcast] = useState([]);\r\n\r\n  // get data for forecasting\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const res = await axios.get(\r\n        `${base_url}/onecall?lat=${lat}&lon=${long}&exclude=hourly,minutely&units=metric&APPID=${api_key}`\r\n      );\r\n      setForcast(res.data);\r\n      // console.log(data)\r\n    };\r\n    fetchData();\r\n  }, [lat, long]);\r\n  const filtered =\r\n    forecast.daily &&\r\n    forecast.daily.filter((day, index) => {\r\n      return index !== 0;\r\n    });\r\n  return (\r\n    <>\r\n      <div className=\"main-weather\">\r\n        <div className=\"deg\">{weatherData.main.temp}&deg;</div>\r\n\r\n        <div className=\"date-place\">\r\n          {weatherData.name}\r\n          <div className=\"date\">{moment().format(\"dddd, MMM D 'YY\")}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"forecast\">\r\n        {forecast.daily &&\r\n          filtered.map((day, index) => {\r\n            return (\r\n              <div className=\"forecastlist\" key={index}>\r\n                <div className=\"forecast-day\">\r\n                  {moment(day.dt * 1000).format(\"ddd\")}\r\n                </div>\r\n                <div className=\"forecast-img\">\r\n                  <img src={`${icon}${day.weather[0].icon}@2x.png`} alt=\"\" />\r\n                </div>\r\n                <div className=\"forecast-desc\">\r\n                  {day.weather[0].description}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\n\r\n// displaying weather detail\r\nconst WeatherDetail = ({ weatherDetail }) => {\r\n  return (\r\n    <div className=\"weather-detail\">\r\n      <h3>Weather Detail</h3>\r\n      <p className=\"detail\">\r\n        Temperature <span>{weatherDetail.main[\"temp\"]} &deg;C</span>\r\n      </p>\r\n      <p className=\"detail\">\r\n        Description <span>{weatherDetail.weather[0].description}</span>\r\n      </p>\r\n      <p className=\"detail\">\r\n        Humidity <span>{weatherDetail.main[\"humidity\"]} %</span>\r\n      </p>\r\n      <p className=\"detail\">\r\n        Wind <span>{weatherDetail.wind[\"speed\"]} mph</span>\r\n      </p>\r\n      <p className=\"detail\">\r\n        Sunrise\r\n        <span>\r\n          {moment(weatherDetail.sys[\"sunrise\"] * 1000).format(\"hh.mm a\")}\r\n        </span>\r\n      </p>\r\n      <p className=\"detail\">\r\n        Sunset\r\n        <span>\r\n          {moment(weatherDetail.sys[\"sunset\"] * 1000).format(\"hh.mm a\")}\r\n        </span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetail;\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Weather from \"./Weather\";\nimport { Input } from \"semantic-ui-react\";\nimport WeatherDetail from \"./WeatherDetail\";\n\nfunction App() {\n  const [lat, setLat] = useState();\n  const [long, setLong] = useState();\n  const [data, setData] = useState([]);\n  const [location, setLocation] = useState();\n  const [input, setInput] = useState();\n\n  const api_key = \"731368453825eee9b4a6f83b6fb487e0\";\n  const base_url = \"https://api.openweathermap.org/data/2.5\";\n\n  // get first data base on latitude and longitude\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      const res = await axios.get(\n        `${base_url}/weather?lat=${lat}&lon=${long}&units=metric&APPID=${api_key}&wind.speed=imperial`\n      );\n      setData(res.data);\n    };\n    fetchData();\n  }, [lat, long]);\n\n  // get data base on location on search bar\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await axios.get(\n        `${base_url}/weather?q=${location}&units=metric&APPID=${api_key}&wind.speed=imperial`\n      );\n      setData(res.data);\n\n      // console.log(data)\n    };\n    fetchData();\n  }, [location]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setLocation(input);\n    setInput(\"\");\n  };\n\n  // displaying the data\n  return (\n    <div className=\"App\">\n      <div className=\"split\">\n        <div className=\"column1\">\n          {typeof data.main != \"undefined\" ? (\n            <Weather\n              weatherData={data}\n              lat={data.coord[\"lat\"] ? data.coord[\"lat\"] : lat}\n              long={data.coord[\"lon\"] ? data.coord[\"lon\"] : long}\n            />\n          ) : (\n            <div></div>\n          )}\n        </div>\n        <div className=\"column2\">\n          <div className=\"input-group\">\n            <form action=\"\" onSubmit={handleSubmit}>\n              <Input\n                value={input}\n                action={{ icon: \"search\" }}\n                onChange={(e) => setInput(e.target.value)}\n                placeholder=\"Another location...\"\n                transparent\n              />\n            </form>\n          </div>\n          {typeof data.main != \"undefined\" ? (\n            <WeatherDetail weatherDetail={data} />\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}